<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Zero to Infinity</title>
    <link>https://psunny0104.github.io/</link>
    
    <atom:link href="https://psunny0104.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Software Engineer</description>
    <pubDate>Tue, 31 Aug 2021 12:18:27 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>[Java] replace(), replaceAll() 의 차이</title>
      <link>https://psunny0104.github.io/2021/08/27/Java-replace-replaceAll/</link>
      <guid>https://psunny0104.github.io/2021/08/27/Java-replace-replaceAll/</guid>
      <pubDate>Fri, 27 Aug 2021 13:11:15 GMT</pubDate>
      
      <description>java.lang.String의 replace(), replaceAll()</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="java-lang-String의-replace-replaceAll"><a href="#java-lang-String의-replace-replaceAll" class="headerlink" title="java.lang.String의 replace(), replaceAll()"></a>java.lang.String의 replace(), replaceAll()</h1><p><a href="https://programmers.co.kr/learn/courses/30/lessons/81301">코딩테스트 연습 - 숫자 문자열과 영단어</a></p><p>프로그래머스에서 위의 링크에 있는 문제를 풀었다. 구현해야할 핵심 사항은 0 ~ 9가 아니라 ‘one’, ‘eight’ 처럼 숫자를 나타내는 문자열이 존재하는 경우 해당하는 숫자로 바꾸는 것이었다. </p><p>주어진 문자열을 선형탐색하면서 숫자가 아닌 문자가 나오면 매칭되는 숫자가 나올 때까지 별도의 index 변수와 while을 이용해서 내부에서도 선형탐색을 하는 방법으로 풀었다.</p><p>문제를 풀고 나서 다른 분들의 풀이를 보았는데 매우 간략하게 잘 푸신 분들이 많았다. 그 중 특이한 점은 replaceAll()과 replace()를 사용한 풀이가 비슷한 비율로 존재했다는 것이다. 그런데 생각해보니 replace()도 분명히 메소드를 호출한 String에서 인자로 들어온 대상을 모두 바꿨던 것 같은 기억이 났다. 그래서 replaceAll()로 작성된 풀이를 replace()로 바꿔서 제출해도 모두 합격이 되는 것이다!</p><p>그래서 replace()와 replaceAll() 메소드와 차이점이 확실히 무엇인지 궁금하다는 생각을 했고 Java API 공식문서를 찾아보았다.</p><hr><h2 id="replace"><a href="#replace" class="headerlink" title="replace()"></a>replace()</h2><p>replace()는 2개로 overloading되어 있다.</p><h3 id="public-String-replace-char-oldChar-char-newChar"><a href="#public-String-replace-char-oldChar-char-newChar" class="headerlink" title="public String replace(char oldChar, char newChar)"></a>public String replace(char oldChar, char newChar)</h3><ul><li><p><code>parameters</code></p><ul><li>oldChar :<code>char</code> - 교체의 대상이 되는 char</li><li>newChar :<code>char</code> - replace를 통해 투입되는 char</li></ul></li><li><p><code>returns</code></p><ul><li><code>String</code> - String에 존재하는 모든 oldChar를 newChar로 바꾼 String</li></ul></li><li><p><code>examples</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> replaceTest <span class="token operator">=</span> <span class="token string">"Hello new World"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>replaceTest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>replaceTest<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'L'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Hello new World</span><span class="token comment">// HeLLo new WorLd</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>char 단위로도 변환을 할 수 있으며, 존재하는 모든 oldChar를 newChar로 대체한 String을 리턴하고 있다. 결과를 보면 replace도 모두 바꿔주는데 끝에 All이 붙으면 어떤 차이가 존재하는걸까? 점점 궁금해졌다.</p><h3 id="public-String-replace-CharSequence-target-CharSequence-replacement"><a href="#public-String-replace-CharSequence-target-CharSequence-replacement" class="headerlink" title="public String replace(CharSequence target, CharSequence replacement)"></a>public String replace(CharSequence target, CharSequence replacement)</h3><ul><li><p><code>parameters</code></p><ul><li>target :<code>CharSequence</code> - replace의 대상이 되는 charSequence</li><li>replacement :<code>CharSequence</code> - replace를 통해 투입되는 charSequence</li></ul></li><li><p><code>returns</code></p><ul><li><code>String</code> - String에 존재하는 모든 target을 replacement로 바꾼 String</li></ul></li><li><p><code>examples</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> replaceTestTwo <span class="token operator">=</span> <span class="token string">"Hello Hello new World"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>replaceTestTwo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>replaceTestTwo<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"ll"</span><span class="token punctuation">,</span> <span class="token string">"LL"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Hello Hello new World</span><span class="token comment">// HeLLo HeLLo new World</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>char 단위가 아니라 charSequence에 대해서 당연히 가능하다. 따라서 연속적인 문자열에도 적용이 가능하다. 참고로 <code>charSequence</code>는 String, StringBuffer, StringBuilder, CharBuffer 등이 implement 하는데 사용하고 있는 Interface이다. 이름 처럼 char값들을 sequence 형태로 읽을 수 있도록 제공하는데 별도로 정리를 해야할 것 같다.</p><h2 id="replaceAll"><a href="#replaceAll" class="headerlink" title="replaceAll()"></a>replaceAll()</h2><h3 id="replaceAll-String-regex-String-replacement"><a href="#replaceAll-String-regex-String-replacement" class="headerlink" title="replaceAll(String regex, String replacement)"></a>replaceAll(String regex, String replacement)</h3><ul><li><p><code>parameters</code></p><ul><li><strong>regex</strong> :<code>String</code> - replace의 대상이 되는 charSequence</li><li>replacement :<code>String</code> - replace를 통해 투입되는 charSequence</li></ul></li><li><p><code>returns</code></p><ul><li><code>String</code> - regex에 매치되는 모든 substring을 replacement로 바꾼 String</li></ul></li><li><p><code>examples</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> replaceTestThree <span class="token operator">=</span> <span class="token string">"Hello Hello new World"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>replaceTestThree<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>replaceTestThree<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"[a-z]"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>replaceTestThree<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"[a-z]"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Hello Hello new World</span><span class="token comment">// Hello Hello new World</span><span class="token comment">// H H  W</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>첫번째 파라미터의 이름으로도 알 수 있지만, replace와 다르게 <strong>정규표현식</strong>을 사용한다. 따라서 특정한 하나의 문자나 연속된 문자열의 형태만 찾아낼 수 있는 replace와 다르게 찾고자하는 여러 대상에 대한 정규표현식을 작성한 뒤 한 번에 매치되는 모든 형태를 찾을 수 있다. </p><p>예제를 보면 <code>[a-z]</code>라는 정규표현식을 통해서 알파벳소문자를 모두 없애버렸다. 즉, a부터 z까지 각각 replace를 사용하는 것이 아니라, replaceAll을 통해 한 번에 바꿀 수 있었다. 물론 replace 예제처럼 연속된 문자열의 형태로 regex 파라미터를 전달하여 정규표현식으로 처리하더라도 결과는 같으므로, 연속된 문자열을 바꾸기 위해 replace() 사용하나 replaceAll()을 사용하나 <strong>같은 결과</strong>를 리턴하는 것이다.</p><p>당연한 이야기이지만 replace에 정규표현식처럼 [a-z]를 target 파라미터로 주면 charSequence이기 때문에 “[a-z]”와 일치하는 문자열을 찾아 바꾸게 된다. “Hello Hello new World”에는 “[a-z]”가 없기 때문에 당연히 그대로 리턴하게 된다.</p><ul><li><p>replaceAll()</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// replaceAll</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token class-name">String</span> regex<span class="token punctuation">,</span> <span class="token class-name">String</span> replacement<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span>replacement<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>replace()</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// replace</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">replace</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span> target<span class="token punctuation">,</span> <span class="token class-name">CharSequence</span> replacement<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> tgtStr <span class="token operator">=</span> target<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> replStr <span class="token operator">=</span> replacement<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>tgtStr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> tgtLen <span class="token operator">=</span> tgtStr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> tgtLen1 <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>tgtLen<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> thisLen <span class="token operator">=</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> newLenHint <span class="token operator">=</span> thisLen <span class="token operator">-</span> tgtLen <span class="token operator">+</span> replStr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newLenHint <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">OutOfMemoryError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>newLenHint<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>replStr<span class="token punctuation">)</span><span class="token punctuation">;</span>            i <span class="token operator">=</span> j <span class="token operator">+</span> tgtLen<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> thisLen <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>tgtStr<span class="token punctuation">,</span> j <span class="token operator">+</span> tgtLen1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> thisLen<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>그런데 regex의 타입이 String이기 때문에 어떻게 정규표현식으로 처리가 되는지 궁금할 수 있다. <strong>replaceAll()과 replace()와 내부 구조가 다른데</strong>, replaceAll()의 내부에서는 정규표현식으로 해당되는 substring을 찾기 위해 정규식의 컴파일된 표현인 <code>Pattern</code>와 Pattern을 해석하여 match 작업을 수행하는 <code>Matcher</code>라는 정규식 관련 클래스에 의해 동작한다. replace()는 <code>StringBuidler</code>를 통해 동작하는 것을 알 수 있다. </p><h3 id="replaceFirst-String-regex-String-replacement"><a href="#replaceFirst-String-regex-String-replacement" class="headerlink" title="replaceFirst(String regex, String replacement)"></a>replaceFirst(String regex, String replacement)</h3><p>replaceAll()과 다르게 <strong>첫번째</strong>로 매치되는 substring만 replacement로 바꿔준다. 따라서 용도에 따라 replaceFirst()과 replaceAll()을 구분해서 사용하면 된다. </p><p>처음 생각했던 것과 다르게 replace()와 구분하는 용도가 아니라, <strong>정규표현식을 이용하는 2개의 메소드를 구분하기 위해 All과 First를 각 메소드의 끝에 붙인 것 같다는 생각이 들었다.</strong></p><hr><p>replace()와 replaceAll()의 차이에 대해 알아보았다. 위의 문제처럼 단순히 연속된 형태의 문자열을 변환하기 위한 것이라면 replaceAll()을 굳이 사용하지 않고 replace()를 사용해도 충분하다는 생각이 든다. char를 한 번에 찾고자 할 때 혹은 여러 문자열들을 정규표현식으로 표현하여 한 번에 바꾸는 것처럼 정규표현식이 유용한 순간에는 replaceAll() 혹은 replaceFirst()를 사용하면 될 것 같다. </p><p><strong>공부를 하다보니 프로그래밍 언어를 개발하는 분들에 대한 존경심이 마구마구 생겼으며, 혹시 미래에 그런 경험을 할 수 있다면 정말 재밌을 것 같다는 생각이 들었다.</strong></p>]]></content:encoded>
      
      
      <category domain="https://psunny0104.github.io/categories/Languages/">Languages</category>
      
      <category domain="https://psunny0104.github.io/categories/Languages/Java/">Java</category>
      
      
      <category domain="https://psunny0104.github.io/tags/Java/">Java</category>
      
      
      <comments>https://psunny0104.github.io/2021/08/27/Java-replace-replaceAll/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
